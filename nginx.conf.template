# 全局配置
worker_processes ${WORKER_PROCESSES};

events {
    worker_connections ${WORKER_CONNECTIONS};
}

http {
    # WebSocket升级映射
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # 日志格式优化
    log_format playwright_access '$remote_addr - $remote_user [$time_local] "$request" '
                                '$status $body_bytes_sent "$http_referer" '
                                '"$http_user_agent" $request_time '
                                'upstream: $upstream_addr $upstream_response_time';

    access_log /var/log/nginx/access.log playwright_access;
    error_log /var/log/nginx/error.log ${LOG_LEVEL};

    # 性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_types text/plain application/json;

    upstream playwright_backend {
        server playwright-1:${INTERNAL_PORT} max_fails=3 fail_timeout=30s;
        # 启用keepalive连接池
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }

    # Rate limiting with configurable parameters
    limit_req_zone $binary_remote_addr zone=api:${RATE_LIMIT_ZONE_SIZE} rate=${RATE_LIMIT_RATE};

    server {
        listen 80;
        listen [::]:80;
        server_name _;

        # 健康检查端点
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # WebSocket连接健康检查
        location /ws-health {
            access_log off;
            return 200 '{"status": "websocket_ready", "timestamp": "${time_iso8601}"}\n';
            add_header Content-Type application/json;
        }

        # 主要API路径
        location / {
            # Rate limiting with configurable burst
            limit_req zone=api burst=${RATE_LIMIT_BURST} nodelay;

            # Token认证检查（支持多Token）
            access_by_lua_block {
                local token = ngx.var.http_authorization
                if token then
                    token = string.match(token, "Bearer%s+(.+)")
                end
                if not token then
                    token = ngx.var.arg_token
                end
                
                if not token then
                    ngx.status = 401
                    ngx.say('{"error": "Missing token"}')
                    ngx.exit(401)
                end
                
                -- 从环境变量读取允许的Token列表
                local allowed_tokens = "${ALLOWED_TOKENS}"
                
                -- 检查Token是否在允许列表中
                local token_valid = false
                for allowed_token in string.gmatch(allowed_tokens, "[^,]+") do
                    allowed_token = allowed_token:gsub("^%s*(.-)%s*$", "%1") -- trim spaces
                    if token == allowed_token then
                        token_valid = true
                        break
                    end
                end
                
                if not token_valid then
                    ngx.status = 401
                    ngx.say('{"error": "Invalid token"}')
                    ngx.exit(401)
                end
            }

            # 代理到后端服务
            proxy_pass http://playwright_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket和HTTP/1.1支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # 动态超时配置（适合浏览器自动化）
            proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT}s;
            proxy_send_timeout ${PROXY_SEND_TIMEOUT}s;
            proxy_read_timeout ${PROXY_READ_TIMEOUT}s;
            
            # 长时间运行的浏览器操作优化
            proxy_buffering off;
            proxy_cache off;
            proxy_request_buffering off;
            proxy_max_temp_file_size 0;
        }
    }
}